var raid_event_datastore = new Ext.data.Store({
    proxy: new Ext.data.HttpProxy({
               url: '/raid_events?format=ext_json',
               method: 'GET'
           }),
    reader: new Ext.data.JsonReader({
                root: 'raid_events',
                id: 'id',
                totalProperty: 'results'
            },
            [ {name: 'id', mapping: 'raid_event.id'},
						 {name: 'is_nonrun', mapping: 'raid_event.is_nonrun'},
						 {name: 'raid_event[name]', mapping: 'raid_event.name'},
						 {name: 'raid_event[dungeon_name]', mapping: 'raid_event.dungeon.name'},
						 {name: 'raid_event[dungeon_mode]', mapping: 'raid_event.dungeon.mode'},
						 {name: 'raid_event[begin_date]', mapping: 'raid_event.begin_date', type: 'date', dateFormat: 'c'},
						 {name: 'raid_event[end_date]', mapping: 'raid_event.end_date', type: 'date', dateFormat: 'c'},
						 {name: 'raid_event[is_scheduled]', mapping: 'raid_event.is_scheduled'},
						 {name: 'raid_event[time_chunks]', mapping: 'raid_event.time_chunks'},
						 {name: 'raid_event[description]', mapping: 'raid_event.description'},
						 {name: 'raid_event[created_at]', mapping: 'raid_event.created_at', type: 'date', dateFormat: 'c'},
						 {name: 'raid_event[updated_at]', mapping: 'raid_event.updated_at', type: 'date', dateFormat: 'c'} ]),
		remoteSort: true,
    sortInfo: {field: 'raid_event[begin_date]', direction: 'DESC'}
});
			
	var raid_event_column_model = new Ext.grid.ColumnModel([
    {id: 'id', header: "#", width: 20, dataIndex: 'id', hidden: true},
    {header: 'Name', dataIndex: 'raid_event[name]', width: 255},
		{header: '', dataIndex: 'raid_event[dungeon_mode]', width: 45},
    {header: 'Dungeon', dataIndex: 'raid_event[dungeon_name]', width: 165},
		{header: 'T Chunks', dataIndex: 'raid_event[time_chunks]', width: 65},
		{header: 'IsSch?', dataIndex: 'raid_event[is_scheduled]', width: 60, renderer: function(value) { if (value) { return 'Y'; } return 'N';}},
    {header: 'Description', dataIndex: 'raid_event[description]', width: 200},
    {header: 'Begin date', dataIndex: 'raid_event[begin_date]', width: 150, renderer : Ext.util.Format.dateRenderer('m/d h:i A')},
    {header: 'End date', dataIndex: 'raid_event[end_date]', width: 150, renderer : Ext.util.Format.dateRenderer('m/d h:i A')}
  ]);

  Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

  var ds = raid_event_datastore;

  var cm = raid_event_column_model;
  cm.defaultSortable = true;

  // create the grid
  var centerPanel = new Ext.grid.GridPanel({
      ds: ds,
      cm: cm,
      sm: new Ext.grid.RowSelectionModel({singleSelect:true}),
      title:      'Listing Raid Events',
      stripeRows: true,
      viewConfig: {
          forceFit:true,
					getRowClass: function (record,indec,param,store) {
								if ( record.data.is_nonrun ) {
									return 'raid-nonrun';
								} 
							}
      },

      // inline toolbars
      tbar:[{
          text:'New...',
					id: 'newRaidButton',
					disabled: <%= current_user == nil %>,
          tooltip:'Create new Raidevent',
          handler: function(){
                     centerPanel.suspendEvents();
                     window.location.href = '/raid_events/new';
                   },
          iconCls:'add'
      }, '-', {
          text:'Edit...',
					id: 'editRaidButton',
					disabled: <%= current_user == nil %>,
          tooltip:'Edit selected Raidevent',
          handler: function(){
                     var selected = centerPanel.getSelectionModel().getSelected();
                     if(selected) {
                       centerPanel.suspendEvents();
                       window.location.href = '/raid_events/' + selected.data.id + '/edit';
                     } else { 
                       alert('Please select a row first.');
                     }
                   },
          iconCls:'edit'
      },'-',{
          text:'Delete...',
					id: 'deleteRaidButton',
					disabled: <%= current_user == nil %>,
          tooltip:'Delete selected Raidevent',
          handler: function(){
                     var selected = centerPanel.getSelectionModel().getSelected();
                     if(selected) {
                       if(confirm('Really delete?')) {
                          var conn = new Ext.data.Connection();
                          conn.request({
                              url: '/raid_events/' + selected.data.id,
                              method: 'POST',
                              params: { _method: 'DELETE'
                                        <% if protect_against_forgery? %> , <%=request_forgery_protection_token%>: '<%=form_authenticity_token%>'<% end %>
                                      },
                              success: function(response, options){ ds.reload(); },
                              failure: function(response, options){ alert('Delete operation failed.'); }
                          });
                       }
                     } else { 
                       alert('Please select a row first.');
                     }
                   },
          iconCls:'remove'
      },'->'],
      bbar: new Ext.PagingToolbar({
                pageSize: 30,
                store: ds,
                displayInfo: true,
                displayMsg: 'Record {0} - {1} of {2}',
                emptyMsg: "No records found"
      }),
      plugins:[new Ext.ux.grid.Search({
                  position:'top'
              })]
  });

  // show record on double-click
  centerPanel.on("rowdblclick", function(grid, row, e) {
    centerPanel.suspendEvents();
    window.location.href = '/raid_events/' + centerPanel.getStore().getAt(row).data.id;
  });
	
  ds.load({params: {start: 0, limit:30}});

